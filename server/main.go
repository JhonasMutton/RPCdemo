package main

import (
	"context"
	"github.com/JhonasMutton/RPCdemo/proto"
	"google.golang.org/grpc"
	"log"
	"net"
	"time"
)

func main() {
	//Configuring connection
	lis, err := net.Listen("tcp", ":8080")
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	//Creating grpc server
	s := grpc.NewServer()
	//Method generated by proto
	//Registering implementation of proto
	proto.RegisterNineTableServiceServer(s, NineTableService{})

	//Initializing server
	log.Printf("Server is up on port 8080")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}

type NineTableService struct {
}

func (n NineTableService) Multiply(ctx context.Context, data *proto.Data) (*proto.Data, error) {
	time.Sleep(10 * time.Second)
	result := make([]int32, 0)
	for _, v := range data.Numbers {
		result = append(result, v*int32(9))
	}
	return &proto.Data{Numbers: result}, nil
}
